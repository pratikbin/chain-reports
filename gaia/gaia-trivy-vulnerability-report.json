{
  "SchemaVersion": 2,
  "ArtifactName": "gaia_v11.0.0",
  "ArtifactType": "container_image",
  "Metadata": {
    "ImageID": "sha256:833f690c10f5163776e31973da9edfbe33789f78b50064d5f12824df235d9a38",
    "DiffIDs": [
      "sha256:e61825404a0c8f47dfddd438c4f48dd0e0b88994e7684aeff5725df7098c82db"
    ],
    "ImageConfig": {
      "architecture": "amd64",
      "created": "2023-08-16T20:13:09.760535204Z",
      "history": [
        {
          "created": "2023-08-16T20:13:09.760535204Z",
          "created_by": "COPY /bin/gaiad /bin/gaiad # buildkit",
          "comment": "buildkit.dockerfile.v0"
        }
      ],
      "os": "linux",
      "rootfs": {
        "type": "layers",
        "diff_ids": [
          "sha256:e61825404a0c8f47dfddd438c4f48dd0e0b88994e7684aeff5725df7098c82db"
        ]
      },
      "config": {
        "Env": [
          "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ],
        "WorkingDir": "/"
      }
    }
  },
  "Results": [
    {
      "Target": "bin/gaiad",
      "Class": "lang-pkgs",
      "Type": "gobinary",
      "Vulnerabilities": [
        {
          "VulnerabilityID": "GHSA-hq58-p9mv-338c",
          "PkgName": "github.com/cometbft/cometbft",
          "InstalledVersion": "v0.34.29",
          "Layer": {
            "Digest": "sha256:ccb59d45bd1c2b47c74f790f380a7fbf0c18047dff698015b17e38cda19b43c3",
            "DiffID": "sha256:e61825404a0c8f47dfddd438c4f48dd0e0b88994e7684aeff5725df7098c82db"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://github.com/advisories/GHSA-hq58-p9mv-338c",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "CometBFT's default for `BlockParams.MaxBytes` consensus parameter may increase block times and affect consensus participation",
          "Description": "## Amulet Security Advisory for CometBFT: ASA-2023-002\n\n**Component**: CometBFT\n**Criticality:** Low\n**Affected versions:** All\n**Affected users:** Validators, Chain Builders + Maintainers\n\n# Summary\n\nA default configuration in CometBFT has been found to be large for common use cases, and may affect block times and consensus participation when fully utilized by chain participants. It is advised that chains consider their specific needs for their use case when setting the `BlockParams.MaxBytes` consensus parameter. Chains are encouraged to evaluate the impact of having proposed blocks with the maximum allowed block size, especially on bandwidth usage and block latency. Additionally, the `timeout_propose` parameter should be computed using the maximum allowed block size as a reference. This issue does not represent an actively exploitable vulnerability that would result in a direct loss of funds, however it may have a slight impact on block latency depending on a network’s topography.\n\nWhen setting a large `BlockParams.MaxBytes`, there are two main implications:\n* Increased bandwidth to propagate a block\n* Increased latency to propagate a block\n\nWhen combined, this may result in less round participation, and in some cases additional rounds may be required to meet the consensus threshold, which could lead to timeouts depending on the topography of a network and environmental factors. These factors can include the number of validators on a network, geographic distribution, network connectivity (including latency, bandwidth, and reachability), the functionality of the modules implementing the logic for a transaction in your chain, etc.  The cost to propagate a 21MB block, the default value for `BlockParams.MaxBytes`, will be far higher than the cost of propagating a smaller 1MB block. CometBFT recommends tuning this parameter to a smaller limit if full initial-round participation is an important quality for your chain.\n\n# Considerations\nCometBFT is designed to be configurable by chains, and implements many different configuration variables and parameters to allow chain developers, validators, node operators, and chain participants to customize it best to their use case. A high-performing validator may find it necessary to experiment with tuning local configuration, optimizing network and compute resources, and implementing controls to inhibit spam.\n\n\n# Next Steps for Chains and Validators\n\nTo increase awareness of the potential impacts of this default parameter, the CometBFT team has updated the documentation (https://github.com/cometbft/cometbft/pull/1405, [v0.34.x](https://docs.cometbft.com/v0.34/spec/abci/apps#blockparamsmaxbytes), [v0.37.x](https://docs.cometbft.com/v0.37/spec/abci/abci++_app_requirements#blockparamsmaxbytes), [v0.38.x](https://docs.cometbft.com/v0.38/spec/abci/abci++_app_requirements#blockparamsmaxbytes)) for builders and maintainers of chain applications. Additionally, it is recommended that:\n\n\n* Chain ecosystems and their maintainers set a `BlockParams.MaxBytes` configuration appropriate for their use case at the application level; in some cases, fine-tuning `BlockParams` may require a network upgrade.\n* Chain ecosystems and their maintainers evaluate how gas is used and required on their chain, including gas and fee parameters, no-fee or fee-exempt message policies, and ensure that any custom modules integrate with the gas and fee frameworks. This is especially important for chains that may have implemented custom modules or functionality to allow IBC messages to bypass fees.\n* Chain ecosystems and their maintainers audit all of their currently-set parameters and configurations to ensure that they are appropriate for their use case.\n\n* All validators develop and implement anti-spam measures on their nodes. Amulet encourages validators to form working groups to collaborate on spam prevention and on tooling that can be implemented by node operators across the Interchain.\n* All validators consider developing and implementing tooling that would allow them to sample incoming transactions to enable them to fine-tune the level of service they would like to provide to be resilient in slowdown scenarios. Amulet also encourages validators to collaborate on tooling that can be implemented by node operators across the Interchain.\n\n\nThe CometBFT team has also revisited all the checks performed by the consensus protocol regarding proposed blocks. This investigation has confirmed that proposed blocks with size exceeding the `BlockParams.MaxBytes` limit established by the application are not accepted by nodes. The team notwithstanding has decided to introduce additional sanity checks for the size of proposed blocks (https://github.com/cometbft/cometbft/pull/1408), allowing for an early identification and rejection of invalid or oversized blocks. These code changes will be included in the _next_ release of each branch of CometBFT.\n\nAs more chains adopt the Interchain Stack for new and cutting-edge use cases, the CometBFT team recommends that all chains regularly evaluate their parameters and configurations to ensure they meet the needs of their ecosystem as their networks mature. \n\n\nFor more information about CometBFT, see [https://docs.cometbft.com](https://docs.cometbft.com/). \n\n\n\n\n\nThis issue was raised by Notional labs, who reported it via the vulnerability disclosure channel at [security@interchain.io](mailto:security@interchain.io) on Friday, September 23, 2023. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see [https://hackerone.com/cosmos](https://hackerone.com/cosmos). \n\n\n*****\n\n \nNote from Amulet on the Security Advisory Process:\n\n\nIn the interest of timely resolution of this issue for validators and node operators, the Amulet team has chosen to use existing processes and resources for distributing security advisories within the Cosmos and Interchain Ecosystems. Stay tuned as we implement an improved, more robust security advisory distribution system that will provide equitable access to information about security issues in the Interchain Stack.",
          "Severity": "LOW",
          "References": [
            "https://docs.cometbft.com/v0.34/spec/abci/apps#blockparamsmaxbytes",
            "https://docs.cometbft.com/v0.37/spec/abci/abci++_app_requirements#blockparamsmaxbytes",
            "https://docs.cometbft.com/v0.38/spec/abci/abci++_app_requirements#blockparamsmaxbytes",
            "https://github.com/cometbft/cometbft",
            "https://github.com/cometbft/cometbft/pull/1405",
            "https://github.com/cometbft/cometbft/security/advisories/GHSA-hq58-p9mv-338c"
          ]
        },
        {
          "VulnerabilityID": "GHSA-23px-mw2p-46qm",
          "PkgName": "github.com/cosmos/cosmos-sdk",
          "InstalledVersion": "v0.45.16-ics",
          "FixedVersion": "0.46",
          "Layer": {
            "Digest": "sha256:ccb59d45bd1c2b47c74f790f380a7fbf0c18047dff698015b17e38cda19b43c3",
            "DiffID": "sha256:e61825404a0c8f47dfddd438c4f48dd0e0b88994e7684aeff5725df7098c82db"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://github.com/advisories/GHSA-23px-mw2p-46qm",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "Cosmos-SDK Cosmovisor component may be vulnerable to denial of service",
          "Description": "**Component**: Cosmovisor\n**Criticality**: Medium\n**Affected Versions**: Cosmovisor \u003c v1.0.0 (distributed with Cosmos-SDK \u003c 0.46)\n**Affected Users**: Validators and Node operators utilizing unsupported versions of Cosmovisor\n**Impact**: DOS, potential RCE on node depending on configuration\n\n\nAn issue has been identified on unsupported versions of Cosmovisor which may result in a Denial of Service or Remote Code Execution path depending on configuration for a node or validator using the vulnerable version to manage their node. \n\nIf a validator is utilizing an affected version of Cosmovisor with `DAEMON_ALLOW_DOWNLOAD_BINARIES` set to true, a non-default configuration, it may be possible for an attacker to trigger a Remote Code Execution path as well on the host. In this configuration it is recommended to immediately stop use of the `DAEMON_ALLOW_DOWNLOAD_BINARIES` feature, and then proceed with an upgrade of Cosmovisor.\n\nIt is recommended that all validators utilizing unsupported versions of Cosmovisor to upgrade to the latest supported versions immediately.  If you are utilizing a forked version of Cosmos-SDK, it is recommended to stop use of Cosmovisor until it is possible to update to a supported version of Cosmovisor, whether through your project’s fork, or directly compiled from the Cosmos-SDK. At the time of this advisory, the latest version of Cosmovisor is v1.5.0. \n\nAdditionally, the Amulet team recommends that developers building chains powered by Cosmos-SDK share this advisory with validators and node operators to ensure this information is available to all impacted parties within their ecosystems.\n\nFor more information about Cosmovisor, see https://docs.cosmos.network/main/tooling/cosmovisor\n\nThis issue was discovered by [Maxwell Dulin](https://maxwelldulin.com) and Nathan Kirkland, who reported it to the Cosmos Bug Bounty Program.  If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see [https://hackerone.com/cosmos](https://hackerone.com/cosmos).\n\n## How to tell if I am affected?\n\nRunning the following command will output whether your cosmovisor version is vulnerable to this issue or not.  \n\nVulnerable to this issue: \n\n```\nstrings ./cosmovisor | grep -q \"NEEDED at\" \u0026\u0026 echo \"vulnerable\" || echo \"NOT vulnerable\"\n\nvulnerable\n```\n\n\nNOT vulnerable to this issue:\n\n```\nstrings ./cosmovisor_new | grep -q \"NEEDED at\" \u0026\u0026 echo \"vulnerable\" || echo \"NOT vulnerable\"\n\nNOT vulnerable\n```\n\n\n*****\n\nA Note from Amulet on the Security Advisory Process\n\nIn the interest of timely resolution of this issue for validators and node operators, the Amulet team has chosen to use existing processes and resources for distributing security advisories within the Cosmos and Interchain Ecosystems. Stay tuned as we implement an improved, more robust security advisory distribution system that will provide equitable access to information about security issues in the Interchain Stack.\n",
          "Severity": "MEDIUM",
          "References": [
            "https://github.com/cosmos/cosmos-sdk",
            "https://github.com/cosmos/cosmos-sdk/blob/tools/cosmovisor/v1.5.0/tools/cosmovisor/CHANGELOG.md",
            "https://github.com/cosmos/cosmos-sdk/releases/tag/v0.46.0",
            "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-23px-mw2p-46qm"
          ]
        },
        {
          "VulnerabilityID": "GHSA-qfc5-6r3j-jj22",
          "PkgName": "github.com/cosmos/cosmos-sdk",
          "InstalledVersion": "v0.45.16-ics",
          "Layer": {
            "Digest": "sha256:ccb59d45bd1c2b47c74f790f380a7fbf0c18047dff698015b17e38cda19b43c3",
            "DiffID": "sha256:e61825404a0c8f47dfddd438c4f48dd0e0b88994e7684aeff5725df7098c82db"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://github.com/advisories/GHSA-qfc5-6r3j-jj22",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "Go package github.com/cosmos/cosmos-sdk module x/crisis does NOT cause chain halt",
          "Description": "# x/crisis does NOT cause chain halt\n\n### Impact\nIf an invariant check fails on a Cosmos SDK network and a transaction is sent to the `x/crisis` module to halt the chain, the chain does not halt. All versions of the `x/crisis` module is affected on all versions of the Cosmos SDK.\n\n### Details\nThe `x/crisis` module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a `MsgVerifyInvariant` with the name of the invariant. Processing this message is supposed to cause the nodes to panic. However, because the panic is within a transaction, it is caught by the SDK’s built-in panic-recovery machinery and just treated as a normal “invalid” transaction (ie. it returns a non-zero abci Code). Thus the `x/crisis` transactions don’t actually cause chains to halt. If there is an invariant violation, it can be confirmed with an `x/crisis` transaction, but it won’t cause any nodes to halt, they will just continue processing blocks.\n\nThat said, any node running with `start --inv-check-period X` will actually panic when it runs the periodic check (though it will still not panic just by processing an `x/crisis` transaction). Since this panic is located in EndBlock, it is not caught by the panic-recovery machinery and does actually crash the node. Presumably few if any nodes actually run with this in production because of how long the invariant checks take, and this runs all of them every `X` blocks.\n\n### Patches\nNo patches will be released.\n\nThe `x/crisis` module was originally intended to allow chains to halt rather than continue with some unknown behaviour in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential [cost of halting increases](https://github.com/osmosis-labs/osmosis/issues/570), chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks, but may not be worth halting for.\n\nIn some cases, chains have already broken the invariant calculations but have dealt with the consequences off-chain or during development. Halting these chains would be counter-productive.\n\nThe SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.\n\nHence, the decision was made that the `x/crisis` module will not be patched for chain halts. The module will be deprecated when new modules take over its responsibilities.\n\n### Workarounds\nIn case of a valid invariant check failure that requires a chain halt, the network validators are encouraged to coordinate off-chain for network halts. This has been an already established process for security patches.\n\n### References\nSDK developer epic about invariant checking: https://github.com/cosmos/cosmos-sdk/issues/15706\nPublic report: https://github.com/cosmos/cosmos-sdk/issues/15325",
          "Severity": "LOW",
          "References": [
            "https://github.com/cosmos/cosmos-sdk",
            "https://github.com/cosmos/cosmos-sdk/issues/15325",
            "https://github.com/cosmos/cosmos-sdk/issues/15706",
            "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-qfc5-6r3j-jj22"
          ]
        },
        {
          "VulnerabilityID": "GHSA-w5w5-2882-47pc",
          "PkgName": "github.com/cosmos/cosmos-sdk",
          "InstalledVersion": "v0.45.16-ics",
          "Layer": {
            "Digest": "sha256:ccb59d45bd1c2b47c74f790f380a7fbf0c18047dff698015b17e38cda19b43c3",
            "DiffID": "sha256:e61825404a0c8f47dfddd438c4f48dd0e0b88994e7684aeff5725df7098c82db"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://github.com/advisories/GHSA-w5w5-2882-47pc",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "github.com/cosmos/cosmos-sdk's x/crisis does not charge ConstantFee",
          "Description": "# x/crisis does not charge ConstantFee\n### Impact\nIf a transaction is sent to the `x/crisis` module to check an invariant, the ConstantFee parameter of the chain is NOT charged. All versions of the `x/crisis` module are affected on all versions of the Cosmos SDK.\n\n### Details\nThe `x/crisis` module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a `MsgVerifyInvariant` with the name of the invariant. Processing this message takes extra processing power hence a `ConstantFee` was introduced on the chain that is charged as extra from the reporter for the extra computational work. This is supposed to avert spammers on the chain making nodes do extra computations using this transaction. By not charging the `ConstantFee`, the transactions related to invariant checking are relatively cheaper compared to the computational need and other transactions.\n\nThat said, the submitter still has to pay the transaction fee to put the transaction on the network, hence using this weakness for spamming is limited by the usual mechanisms.\n\nSynthetic testing showed up to a 20% increase in CPU usage on a validator node that is spammed by hundreds of `MsgVerifyInvariant` messages which still makes this an expensive operation to carry out on a live blockchain network.\n\n### Patches\nThe `ConstantFee` charge of the `x/crisis` module will either be fixed or disabled in an upcoming regular release of the Cosmos SDK.\n\nThe `x/crisis` module was originally intended to allow chains to halt rather than continue with some unknown behavior in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential [cost of halting increases](https://github.com/osmosis-labs/osmosis/issues/570), chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks.\n\nThe SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.\n\nHence, the decision was made that the `x/crisis` module will be deprecated when new modules take over its responsibilities.\n\n### Workarounds\nThere is no workaround posted. Validators are advised to leave some extra computing room on their servers for possible spamming scenarios. (This is a good measure in any case.)\n\n### References\nSDK developer epic about invariant checking: https://github.com/cosmos/cosmos-sdk/issues/15706\n",
          "Severity": "LOW",
          "References": [
            "https://github.com/cosmos/cosmos-sdk",
            "https://github.com/cosmos/cosmos-sdk/issues/15706",
            "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-w5w5-2882-47pc"
          ]
        }
      ]
    }
  ]
}
