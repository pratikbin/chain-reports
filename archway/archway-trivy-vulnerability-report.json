{
  "SchemaVersion": 2,
  "ArtifactName": "archway_v3.0.0",
  "ArtifactType": "container_image",
  "Metadata": {
    "ImageID": "sha256:1400b39b475b9b661b9eb6b3437dd3ba18b1eb346258c71e12dd1cae3248011a",
    "DiffIDs": [
      "sha256:d86e420c1460e5c613c07ced8fbc06d45ae88e9ec45e38e4861919ee9fc2cc0b"
    ],
    "ImageConfig": {
      "architecture": "amd64",
      "created": "2023-08-16T20:11:03.453496584Z",
      "history": [
        {
          "created": "2023-08-16T20:11:03.453496584Z",
          "created_by": "COPY /bin/archwayd /bin/archwayd # buildkit",
          "comment": "buildkit.dockerfile.v0"
        }
      ],
      "os": "linux",
      "rootfs": {
        "type": "layers",
        "diff_ids": [
          "sha256:d86e420c1460e5c613c07ced8fbc06d45ae88e9ec45e38e4861919ee9fc2cc0b"
        ]
      },
      "config": {
        "Env": [
          "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ],
        "WorkingDir": "/"
      }
    }
  },
  "Results": [
    {
      "Target": "bin/archwayd",
      "Class": "lang-pkgs",
      "Type": "gobinary",
      "Vulnerabilities": [
        {
          "VulnerabilityID": "CVE-2023-34451",
          "PkgName": "github.com/cometbft/cometbft",
          "InstalledVersion": "v0.34.27",
          "FixedVersion": "0.37.2, 0.34.29",
          "Layer": {
            "Digest": "sha256:e98e772ec7981fb21609831bf2fca6ef84438072bbdc74ea8c3627c289a3e2fc",
            "DiffID": "sha256:d86e420c1460e5c613c07ced8fbc06d45ae88e9ec45e38e4861919ee9fc2cc0b"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2023-34451",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "CometBFT may duplicate transactions in the mempool's data structures",
          "Description": "CometBFT is a Byzantine Fault Tolerant (BFT) middleware that takes a state transition machine and replicates it on many machines. The mempool maintains two data structures to keep track of outstanding transactions: a list and a map.\nThese two data structures are supposed to be in sync all the time in the sense that the map tracks the index (if any) of the transaction in the list. In `v0.37.0`, and `v0.37.1`, as well as in `v0.34.28`, and all previous releases of the CometBFT repo2, it is possible to have them out of sync. When this happens, the list may contain several copies of the same transaction. Because the map tracks a single index, it is then no longer possible to remove all the copies of the transaction from the list. This happens even if the duplicated transaction is later committed in a block. The only way to remove the transaction is by restarting the node.\n\nThe above problem can be repeated on and on until a sizable number of transactions are stuck in the mempool, in order to try to bring down the target node. The problem is fixed in releases `v0.34.29` and `v0.37.2`. Some workarounds are available. Increasing the value of `cache_size` in `config.toml` makes it very difficult to effectively attack a full node. Not exposing the transaction submission RPC's would mitigate the probability of a successful attack, as the attacker would then have to create a modified (byzantine) full node to be able to perform the attack via p2p.",
          "Severity": "HIGH",
          "CweIDs": [
            "CWE-401"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
              "V3Score": 8.2
            },
            "nvd": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
              "V3Score": 8.2
            }
          },
          "References": [
            "https://github.com/advisories/GHSA-w24w-wp77-qffm",
            "https://github.com/cometbft/cometbft/pull/890",
            "https://github.com/cometbft/cometbft/security/advisories/GHSA-w24w-wp77-qffm",
            "https://github.com/tendermint/tendermint/pull/2778",
            "https://nvd.nist.gov/vuln/detail/CVE-2023-34451"
          ],
          "PublishedDate": "2023-07-03T17:15:00Z",
          "LastModifiedDate": "2023-07-17T18:58:00Z"
        },
        {
          "VulnerabilityID": "GHSA-qfc5-6r3j-jj22",
          "PkgName": "github.com/cosmos/cosmos-sdk",
          "InstalledVersion": "v0.45.16",
          "Layer": {
            "Digest": "sha256:e98e772ec7981fb21609831bf2fca6ef84438072bbdc74ea8c3627c289a3e2fc",
            "DiffID": "sha256:d86e420c1460e5c613c07ced8fbc06d45ae88e9ec45e38e4861919ee9fc2cc0b"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://github.com/advisories/GHSA-qfc5-6r3j-jj22",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "Go package github.com/cosmos/cosmos-sdk module x/crisis does NOT cause chain halt",
          "Description": "# x/crisis does NOT cause chain halt\n\n### Impact\nIf an invariant check fails on a Cosmos SDK network and a transaction is sent to the `x/crisis` module to halt the chain, the chain does not halt. All versions of the `x/crisis` module is affected on all versions of the Cosmos SDK.\n\n### Details\nThe `x/crisis` module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a `MsgVerifyInvariant` with the name of the invariant. Processing this message is supposed to cause the nodes to panic. However, because the panic is within a transaction, it is caught by the SDK’s built-in panic-recovery machinery and just treated as a normal “invalid” transaction (ie. it returns a non-zero abci Code). Thus the `x/crisis` transactions don’t actually cause chains to halt. If there is an invariant violation, it can be confirmed with an `x/crisis` transaction, but it won’t cause any nodes to halt, they will just continue processing blocks.\n\nThat said, any node running with `start --inv-check-period X` will actually panic when it runs the periodic check (though it will still not panic just by processing an `x/crisis` transaction). Since this panic is located in EndBlock, it is not caught by the panic-recovery machinery and does actually crash the node. Presumably few if any nodes actually run with this in production because of how long the invariant checks take, and this runs all of them every `X` blocks.\n\n### Patches\nNo patches will be released.\n\nThe `x/crisis` module was originally intended to allow chains to halt rather than continue with some unknown behaviour in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential [cost of halting increases](https://github.com/osmosis-labs/osmosis/issues/570), chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks, but may not be worth halting for.\n\nIn some cases, chains have already broken the invariant calculations but have dealt with the consequences off-chain or during development. Halting these chains would be counter-productive.\n\nThe SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.\n\nHence, the decision was made that the `x/crisis` module will not be patched for chain halts. The module will be deprecated when new modules take over its responsibilities.\n\n### Workarounds\nIn case of a valid invariant check failure that requires a chain halt, the network validators are encouraged to coordinate off-chain for network halts. This has been an already established process for security patches.\n\n### References\nSDK developer epic about invariant checking: https://github.com/cosmos/cosmos-sdk/issues/15706\nPublic report: https://github.com/cosmos/cosmos-sdk/issues/15325",
          "Severity": "LOW",
          "References": [
            "https://github.com/advisories/GHSA-qfc5-6r3j-jj22",
            "https://github.com/cosmos/cosmos-sdk/issues/15325",
            "https://github.com/cosmos/cosmos-sdk/issues/15706",
            "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-qfc5-6r3j-jj22"
          ]
        },
        {
          "VulnerabilityID": "GHSA-w5w5-2882-47pc",
          "PkgName": "github.com/cosmos/cosmos-sdk",
          "InstalledVersion": "v0.45.16",
          "Layer": {
            "Digest": "sha256:e98e772ec7981fb21609831bf2fca6ef84438072bbdc74ea8c3627c289a3e2fc",
            "DiffID": "sha256:d86e420c1460e5c613c07ced8fbc06d45ae88e9ec45e38e4861919ee9fc2cc0b"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://github.com/advisories/GHSA-w5w5-2882-47pc",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "github.com/cosmos/cosmos-sdk's x/crisis does not charge ConstantFee",
          "Description": "# x/crisis does not charge ConstantFee\n### Impact\nIf a transaction is sent to the `x/crisis` module to check an invariant, the ConstantFee parameter of the chain is NOT charged. All versions of the `x/crisis` module are affected on all versions of the Cosmos SDK.\n\n### Details\nThe `x/crisis` module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a `MsgVerifyInvariant` with the name of the invariant. Processing this message takes extra processing power hence a `ConstantFee` was introduced on the chain that is charged as extra from the reporter for the extra computational work. This is supposed to avert spammers on the chain making nodes do extra computations using this transaction. By not charging the `ConstantFee`, the transactions related to invariant checking are relatively cheaper compared to the computational need and other transactions.\n\nThat said, the submitter still has to pay the transaction fee to put the transaction on the network, hence using this weakness for spamming is limited by the usual mechanisms.\n\nSynthetic testing showed up to a 20% increase in CPU usage on a validator node that is spammed by hundreds of `MsgVerifyInvariant` messages which still makes this an expensive operation to carry out on a live blockchain network.\n\n### Patches\nThe `ConstantFee` charge of the `x/crisis` module will either be fixed or disabled in an upcoming regular release of the Cosmos SDK.\n\nThe `x/crisis` module was originally intended to allow chains to halt rather than continue with some unknown behavior in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential [cost of halting increases](https://github.com/osmosis-labs/osmosis/issues/570), chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks.\n\nThe SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.\n\nHence, the decision was made that the `x/crisis` module will be deprecated when new modules take over its responsibilities.\n\n### Workarounds\nThere is no workaround posted. Validators are advised to leave some extra computing room on their servers for possible spamming scenarios. (This is a good measure in any case.)\n\n### References\nSDK developer epic about invariant checking: https://github.com/cosmos/cosmos-sdk/issues/15706\n",
          "Severity": "LOW",
          "References": [
            "https://github.com/advisories/GHSA-w5w5-2882-47pc",
            "https://github.com/cosmos/cosmos-sdk/issues/15706",
            "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-w5w5-2882-47pc"
          ]
        },
        {
          "VulnerabilityID": "CVE-2023-2253",
          "PkgName": "github.com/docker/distribution",
          "InstalledVersion": "v2.8.1+incompatible",
          "FixedVersion": "2.8.2-beta.1",
          "Layer": {
            "Digest": "sha256:e98e772ec7981fb21609831bf2fca6ef84438072bbdc74ea8c3627c289a3e2fc",
            "DiffID": "sha256:d86e420c1460e5c613c07ced8fbc06d45ae88e9ec45e38e4861919ee9fc2cc0b"
          },
          "SeveritySource": "ghsa",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2023-2253",
          "DataSource": {
            "ID": "ghsa",
            "Name": "GitHub Security Advisory Go",
            "URL": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"
          },
          "Title": "DoS from malicious API request",
          "Description": "A flaw was found in the `/v2/_catalog` endpoint in distribution/distribution, which accepts a parameter to control the maximum number of records returned (query string: `n`). This vulnerability allows a malicious user to submit an unreasonably large value for `n,` causing the allocation of a massive string array, possibly causing a denial of service through excessive use of memory.",
          "Severity": "HIGH",
          "CweIDs": [
            "CWE-770"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 7.5
            },
            "nvd": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 6.5
            },
            "redhat": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 6.5
            }
          },
          "References": [
            "https://access.redhat.com/security/cve/CVE-2023-2253",
            "https://bugzilla.redhat.com/show_bug.cgi?id=2189886",
            "https://github.com/advisories/GHSA-hqxw-f8mx-cpmw",
            "https://github.com/distribution/distribution/commit/f55a6552b006a381d9167e328808565dd2bf77dc",
            "https://github.com/distribution/distribution/security/advisories/GHSA-hqxw-f8mx-cpmw",
            "https://lists.debian.org/debian-lts-announce/2023/06/msg00035.html",
            "https://nvd.nist.gov/vuln/detail/CVE-2023-2253",
            "https://www.cve.org/CVERecord?id=CVE-2023-2253"
          ],
          "PublishedDate": "2023-06-06T20:15:00Z",
          "LastModifiedDate": "2023-06-29T16:15:00Z"
        }
      ]
    }
  ]
}
